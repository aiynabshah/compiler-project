
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\013\003\000\002\013" +
    "\004\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\015\007\000\002\015\006\000\002\025" +
    "\005\000\002\016\012\000\002\016\011\000\002\011\006" +
    "\000\002\011\004\000\002\017\012\000\002\027\003\000" +
    "\002\027\004\000\002\030\010\000\002\031\007\000\002" +
    "\031\002\000\002\020\014\000\002\021\011\000\002\022" +
    "\013\000\002\026\011\000\002\023\012\000\002\023\015" +
    "\000\002\032\004\000\002\032\003\000\002\032\002\000" +
    "\002\033\006\000\002\024\007\000\002\034\003\000\002" +
    "\034\003\000\002\034\002\000\002\035\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\003\000\002\010\005\000\002\010\005\000" +
    "\002\010\003\000\002\005\005\000\002\005\003\000\002" +
    "\006\005\000\002\006\003\000\002\007\003\000\002\007" +
    "\004\000\002\037\003\000\002\037\004\000\002\037\004" +
    "\000\002\002\005\000\002\002\005\000\002\002\003\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\003\000\002\012\004\000\002\012\004\000\002\012" +
    "\003\000\002\004\005\000\002\004\003\000\002\004\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\022\012\014\026\013\032\012\034\010\035" +
    "\024\040\017\041\005\046\025\001\002\000\032\002\ufffe" +
    "\012\ufffe\026\ufffe\030\ufffe\032\ufffe\034\ufffe\035\ufffe\040" +
    "\ufffe\041\ufffe\044\ufffe\046\ufffe\050\ufffe\001\002\000\004" +
    "\010\243\001\002\000\032\002\ufffc\012\ufffc\026\ufffc\030" +
    "\ufffc\032\ufffc\034\ufffc\035\ufffc\040\ufffc\041\ufffc\044\ufffc" +
    "\046\ufffc\050\ufffc\001\002\000\024\002\242\012\014\026" +
    "\013\032\012\034\010\035\024\040\017\041\005\046\025" +
    "\001\002\000\004\010\216\001\002\000\032\002\ufff9\012" +
    "\ufff9\026\ufff9\030\ufff9\032\ufff9\034\ufff9\035\ufff9\040\ufff9" +
    "\041\ufff9\044\ufff9\046\ufff9\050\ufff9\001\002\000\004\012" +
    "\175\001\002\000\004\010\161\001\002\000\006\010\151" +
    "\024\136\001\002\000\032\002\ufff7\012\ufff7\026\ufff7\030" +
    "\ufff7\032\ufff7\034\ufff7\035\ufff7\040\ufff7\041\ufff7\044\ufff7" +
    "\046\ufff7\050\ufff7\001\002\000\032\002\ufffa\012\ufffa\026" +
    "\ufffa\030\ufffa\032\ufffa\034\ufffa\035\ufffa\040\ufffa\041\ufffa" +
    "\044\ufffa\046\ufffa\050\ufffa\001\002\000\004\027\141\001" +
    "\002\000\032\002\000\012\000\026\000\030\000\032\000" +
    "\034\000\035\000\040\000\041\000\044\000\046\000\050" +
    "\000\001\002\000\032\002\ufff6\012\ufff6\026\ufff6\030\ufff6" +
    "\032\ufff6\034\ufff6\035\ufff6\040\ufff6\041\ufff6\044\ufff6\046" +
    "\ufff6\050\ufff6\001\002\000\032\002\ufffd\012\ufffd\026\ufffd" +
    "\030\ufffd\032\ufffd\034\ufffd\035\ufffd\040\ufffd\041\ufffd\044" +
    "\ufffd\046\ufffd\050\ufffd\001\002\000\032\002\ufff8\012\ufff8" +
    "\026\ufff8\030\ufff8\032\ufff8\034\ufff8\035\ufff8\040\ufff8\041" +
    "\ufff8\044\ufff8\046\ufff8\050\ufff8\001\002\000\004\010\037" +
    "\001\002\000\004\047\030\001\002\000\032\002\ufffb\012" +
    "\ufffb\026\ufffb\030\ufffb\032\ufffb\034\ufffb\035\ufffb\040\ufffb" +
    "\041\ufffb\044\ufffb\046\ufffb\050\ufffb\001\002\000\032\002" +
    "\ufff5\012\ufff5\026\ufff5\030\ufff5\032\ufff5\034\ufff5\035\ufff5" +
    "\040\ufff5\041\ufff5\044\ufff5\046\ufff5\050\ufff5\001\002\000" +
    "\004\010\031\001\002\000\004\011\032\001\002\000\004" +
    "\027\033\001\002\000\022\012\014\026\013\032\012\034" +
    "\010\035\024\040\017\041\005\046\025\001\002\000\024" +
    "\012\014\026\013\030\036\032\012\034\010\035\024\040" +
    "\017\041\005\046\025\001\002\000\032\002\uffff\012\uffff" +
    "\026\uffff\030\uffff\032\uffff\034\uffff\035\uffff\040\uffff\041" +
    "\uffff\044\uffff\046\uffff\050\uffff\001\002\000\032\002\uffe4" +
    "\012\uffe4\026\uffe4\030\uffe4\032\uffe4\034\uffe4\035\uffe4\040" +
    "\uffe4\041\uffe4\044\uffe4\046\uffe4\050\uffe4\001\002\000\006" +
    "\012\040\032\041\001\002\000\004\024\136\001\002\000" +
    "\004\012\132\001\002\000\016\010\044\012\052\016\047" +
    "\025\055\036\046\037\043\001\002\000\014\010\044\012" +
    "\052\016\047\036\046\037\043\001\002\000\014\010\044" +
    "\012\052\016\047\036\046\037\043\001\002\000\044\004" +
    "\uffc5\005\uffc5\006\067\007\070\011\uffc5\013\uffc5\014\uffc5" +
    "\015\066\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\025" +
    "\uffc5\031\uffc5\036\uffc5\037\uffc5\001\002\000\014\010\044" +
    "\012\052\016\047\036\046\037\043\001\002\000\044\004" +
    "\uffbb\005\uffbb\006\uffbb\007\uffbb\011\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\025" +
    "\uffbb\031\uffbb\036\uffbb\037\uffbb\001\002\000\044\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\011\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\025\uffc1" +
    "\031\uffc1\036\uffc1\037\uffc1\001\002\000\014\020\113\021" +
    "\114\022\112\023\111\031\110\001\002\000\044\004\uffbc" +
    "\005\uffbc\006\uffbc\007\uffbc\011\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\025\uffbc" +
    "\031\uffbc\036\uffbc\037\uffbc\001\002\000\022\011\uffd4\017" +
    "\104\020\uffd4\021\uffd4\022\uffd4\023\uffd4\025\105\031\uffd4" +
    "\001\002\000\026\011\uffcd\013\uffcd\014\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\025\uffcd\031\uffcd\001\002" +
    "\000\016\010\044\012\052\016\047\025\055\036\046\037" +
    "\043\001\002\000\026\011\uffcf\013\101\014\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\023\uffcf\025\uffcf\031\uffcf\001" +
    "\002\000\024\011\uffd1\014\077\017\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\025\uffd1\031\uffd1\001\002\000\032\011" +
    "\uffcc\013\uffcc\014\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\025\uffcc\031\uffcc\036\075\037\076\001\002\000" +
    "\044\004\uffbe\005\uffbe\006\uffbe\007\uffbe\011\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\025\uffbe\031\uffbe\036\uffbe\037\uffbe\001\002\000\036" +
    "\004\063\005\064\011\uffca\013\uffca\014\uffca\017\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\025\uffca\031\uffca\036\uffca" +
    "\037\uffca\001\002\000\014\010\044\012\052\016\047\036" +
    "\046\037\043\001\002\000\014\010\044\012\052\016\047" +
    "\036\046\037\043\001\002\000\044\004\uffc6\005\uffc6\006" +
    "\067\007\070\011\uffc6\013\uffc6\014\uffc6\015\066\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\025\uffc6\031\uffc6\036" +
    "\uffc6\037\uffc6\001\002\000\014\010\044\012\052\016\047" +
    "\036\046\037\043\001\002\000\014\010\044\012\052\016" +
    "\047\036\046\037\043\001\002\000\014\010\044\012\052" +
    "\016\047\036\046\037\043\001\002\000\044\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\011\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\025\uffc3\031" +
    "\uffc3\036\uffc3\037\uffc3\001\002\000\044\004\uffc4\005\uffc4" +
    "\006\uffc4\007\uffc4\011\uffc4\013\uffc4\014\uffc4\015\uffc4\017" +
    "\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\025\uffc4\031\uffc4" +
    "\036\uffc4\037\uffc4\001\002\000\044\004\uffc2\005\uffc2\006" +
    "\uffc2\007\uffc2\011\uffc2\013\uffc2\014\uffc2\015\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\023\uffc2\025\uffc2\031\uffc2\036" +
    "\uffc2\037\uffc2\001\002\000\044\004\uffc7\005\uffc7\006\067" +
    "\007\070\011\uffc7\013\uffc7\014\uffc7\015\066\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\025\uffc7\031\uffc7\036\uffc7" +
    "\037\uffc7\001\002\000\032\011\uffc8\013\uffc8\014\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\025\uffc8\031\uffc8" +
    "\036\uffc8\037\uffc8\001\002\000\032\011\uffc9\013\uffc9\014" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\025\uffc9" +
    "\031\uffc9\036\uffc9\037\uffc9\001\002\000\016\010\044\012" +
    "\052\016\047\025\055\036\046\037\043\001\002\000\026" +
    "\011\uffd0\013\101\014\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\025\uffd0\031\uffd0\001\002\000\016\010\044" +
    "\012\052\016\047\025\055\036\046\037\043\001\002\000" +
    "\026\011\uffce\013\uffce\014\uffce\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\023\uffce\025\uffce\031\uffce\001\002\000\026\011" +
    "\uffcb\013\uffcb\014\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\025\uffcb\031\uffcb\001\002\000\016\010\044\012" +
    "\052\016\047\025\055\036\046\037\043\001\002\000\016" +
    "\010\044\012\052\016\047\025\055\036\046\037\043\001" +
    "\002\000\024\011\uffd3\014\077\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\025\uffd3\031\uffd3\001\002\000\024\011" +
    "\uffd2\014\077\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\025\uffd2\031\uffd2\001\002\000\014\010\044\012\052\016" +
    "\047\036\046\037\043\001\002\000\016\010\044\012\052" +
    "\016\047\025\055\036\046\037\043\001\002\000\016\010" +
    "\044\012\052\016\047\025\055\036\046\037\043\001\002" +
    "\000\016\010\044\012\052\016\047\025\055\036\046\037" +
    "\043\001\002\000\016\010\044\012\052\016\047\025\055" +
    "\036\046\037\043\001\002\000\022\011\uffd8\017\104\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\025\105\031\uffd8\001\002" +
    "\000\022\011\uffd7\017\104\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\025\105\031\uffd7\001\002\000\022\011\uffd6\017\104" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\025\105\031\uffd6\001" +
    "\002\000\022\011\uffd5\017\104\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\025\105\031\uffd5\001\002\000\010\011\122\036" +
    "\075\037\076\001\002\000\004\027\123\001\002\000\022" +
    "\012\014\026\013\032\012\034\010\035\024\040\017\041" +
    "\005\046\025\001\002\000\024\012\014\026\013\030\125" +
    "\032\012\034\010\035\024\040\017\041\005\046\025\001" +
    "\002\000\032\002\uffe7\012\uffe7\026\uffe7\030\uffe7\032\uffe7" +
    "\034\uffe7\035\uffe7\040\uffe7\041\uffe7\044\uffe7\046\uffe7\050" +
    "\uffe7\001\002\000\044\004\uffbf\005\uffbf\006\uffbf\007\uffbf" +
    "\011\uffbf\013\uffbf\014\uffbf\015\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\025\uffbf\031\uffbf\036\uffbf\037\uffbf" +
    "\001\002\000\010\011\130\036\075\037\076\001\002\000" +
    "\044\004\uffbd\005\uffbd\006\uffbd\007\uffbd\011\uffbd\013\uffbd" +
    "\014\uffbd\015\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\025\uffbd\031\uffbd\036\uffbd\037\uffbd\001\002\000\044" +
    "\004\uffc0\005\uffc0\006\uffc0\007\uffc0\011\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\025\uffc0\031\uffc0\036\uffc0\037\uffc0\001\002\000\004\024" +
    "\133\001\002\000\014\010\044\012\052\016\047\036\046" +
    "\037\043\001\002\000\010\031\135\036\075\037\076\001" +
    "\002\000\044\002\ufff4\010\ufff4\012\ufff4\016\ufff4\025\ufff4" +
    "\026\ufff4\030\ufff4\032\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\041\ufff4\044\ufff4\046\ufff4\050\ufff4\001\002" +
    "\000\014\010\044\012\052\016\047\036\046\037\043\001" +
    "\002\000\010\031\140\036\075\037\076\001\002\000\044" +
    "\002\ufff3\010\ufff3\012\ufff3\016\ufff3\025\ufff3\026\ufff3\030" +
    "\ufff3\032\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3" +
    "\041\ufff3\044\ufff3\046\ufff3\050\ufff3\001\002\000\022\012" +
    "\014\026\013\032\012\034\010\035\024\040\017\041\005" +
    "\046\025\001\002\000\024\012\014\026\013\030\143\032" +
    "\012\034\010\035\024\040\017\041\005\046\025\001\002" +
    "\000\004\041\144\001\002\000\004\010\145\001\002\000" +
    "\016\010\044\012\052\016\047\025\055\036\046\037\043" +
    "\001\002\000\014\011\147\020\113\021\114\022\112\023" +
    "\111\001\002\000\004\031\150\001\002\000\032\002\uffe5" +
    "\012\uffe5\026\uffe5\030\uffe5\032\uffe5\034\uffe5\035\uffe5\040" +
    "\uffe5\041\uffe5\044\uffe5\046\uffe5\050\uffe5\001\002\000\006" +
    "\011\uffda\012\152\001\002\000\006\011\uffdc\051\157\001" +
    "\002\000\004\011\155\001\002\000\004\011\uffdb\001\002" +
    "\000\004\031\156\001\002\000\032\002\uffdd\012\uffdd\026" +
    "\uffdd\030\uffdd\032\uffdd\034\uffdd\035\uffdd\040\uffdd\041\uffdd" +
    "\044\uffdd\046\uffdd\050\uffdd\001\002\000\006\011\uffda\012" +
    "\152\001\002\000\004\011\uffd9\001\002\000\016\010\044" +
    "\012\052\016\047\025\055\036\046\037\043\001\002\000" +
    "\014\011\163\020\113\021\114\022\112\023\111\001\002" +
    "\000\004\027\164\001\002\000\022\012\014\026\013\032" +
    "\012\034\010\035\024\040\017\041\005\046\025\001\002" +
    "\000\024\012\014\026\013\030\166\032\012\034\010\035" +
    "\024\040\017\041\005\046\025\001\002\000\034\002\ufff0" +
    "\012\ufff0\026\ufff0\030\ufff0\032\ufff0\033\167\034\ufff0\035" +
    "\ufff0\040\ufff0\041\ufff0\044\ufff0\046\ufff0\050\ufff0\001\002" +
    "\000\006\026\013\027\171\001\002\000\032\002\ufff1\012" +
    "\ufff1\026\ufff1\030\ufff1\032\ufff1\034\ufff1\035\ufff1\040\ufff1" +
    "\041\ufff1\044\ufff1\046\ufff1\050\ufff1\001\002\000\022\012" +
    "\014\026\013\032\012\034\010\035\024\040\017\041\005" +
    "\046\025\001\002\000\032\002\uffee\012\uffee\026\uffee\030" +
    "\uffee\032\uffee\034\uffee\035\uffee\040\uffee\041\uffee\044\uffee" +
    "\046\uffee\050\uffee\001\002\000\024\012\014\026\013\030" +
    "\174\032\012\034\010\035\024\040\017\041\005\046\025" +
    "\001\002\000\032\002\uffef\012\uffef\026\uffef\030\uffef\032" +
    "\uffef\034\uffef\035\uffef\040\uffef\041\uffef\044\uffef\046\uffef" +
    "\050\uffef\001\002\000\010\010\177\024\133\031\176\001" +
    "\002\000\032\002\ufff2\012\ufff2\026\ufff2\030\ufff2\032\ufff2" +
    "\034\ufff2\035\ufff2\040\ufff2\041\ufff2\044\ufff2\046\ufff2\050" +
    "\ufff2\001\002\000\006\011\uffdf\032\202\001\002\000\004" +
    "\011\206\001\002\000\004\011\uffe0\001\002\000\004\012" +
    "\203\001\002\000\006\011\uffe1\051\204\001\002\000\006" +
    "\011\uffdf\032\202\001\002\000\004\011\uffde\001\002\000" +
    "\004\027\207\001\002\000\022\012\014\026\013\032\012" +
    "\034\010\035\024\040\017\041\005\046\025\001\002\000" +
    "\026\012\014\026\013\030\212\032\012\034\010\035\024" +
    "\040\017\041\005\046\025\050\211\001\002\000\004\012" +
    "\213\001\002\000\032\002\uffe3\012\uffe3\026\uffe3\030\uffe3" +
    "\032\uffe3\034\uffe3\035\uffe3\040\uffe3\041\uffe3\044\uffe3\046" +
    "\uffe3\050\uffe3\001\002\000\004\031\214\001\002\000\004" +
    "\030\215\001\002\000\032\002\uffe2\012\uffe2\026\uffe2\030" +
    "\uffe2\032\uffe2\034\uffe2\035\uffe2\040\uffe2\041\uffe2\044\uffe2" +
    "\046\uffe2\050\uffe2\001\002\000\014\010\044\012\052\016" +
    "\047\036\046\037\043\001\002\000\010\011\220\036\075" +
    "\037\076\001\002\000\004\027\221\001\002\000\004\042" +
    "\223\001\002\000\010\030\uffe8\042\223\045\233\001\002" +
    "\000\004\016\225\001\002\000\010\030\uffec\042\uffec\045" +
    "\uffec\001\002\000\004\043\226\001\002\000\022\012\014" +
    "\026\013\032\012\034\010\035\024\040\017\041\005\046" +
    "\025\001\002\000\024\012\014\026\013\032\012\034\010" +
    "\035\024\040\017\041\005\044\230\046\025\001\002\000" +
    "\004\031\231\001\002\000\010\030\uffea\042\uffea\045\uffea" +
    "\001\002\000\004\030\241\001\002\000\004\043\235\001" +
    "\002\000\010\030\uffeb\042\uffeb\045\uffeb\001\002\000\022" +
    "\012\014\026\013\032\012\034\010\035\024\040\017\041" +
    "\005\046\025\001\002\000\024\012\014\026\013\032\012" +
    "\034\010\035\024\040\017\041\005\044\237\046\025\001" +
    "\002\000\004\031\240\001\002\000\004\030\uffe9\001\002" +
    "\000\032\002\uffed\012\uffed\026\uffed\030\uffed\032\uffed\034" +
    "\uffed\035\uffed\040\uffed\041\uffed\044\uffed\046\uffed\050\uffed" +
    "\001\002\000\004\002\001\001\002\000\016\010\044\012" +
    "\052\016\047\025\055\036\046\037\043\001\002\000\014" +
    "\011\245\020\113\021\114\022\112\023\111\001\002\000" +
    "\004\027\246\001\002\000\022\012\014\026\013\032\012" +
    "\034\010\035\024\040\017\041\005\046\025\001\002\000" +
    "\024\012\014\026\013\030\250\032\012\034\010\035\024" +
    "\040\017\041\005\046\025\001\002\000\032\002\uffe6\012" +
    "\uffe6\026\uffe6\030\uffe6\032\uffe6\034\uffe6\035\uffe6\040\uffe6" +
    "\041\uffe6\044\uffe6\046\uffe6\050\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\032\013\006\014\017\015\003\016\021\017" +
    "\005\020\025\021\015\022\010\023\022\024\014\025\020" +
    "\026\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\014\034\015\003\016\021\017\005" +
    "\020\025\021\015\022\010\023\022\024\014\025\020\026" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\013\033\014\017\015\003\016\021\017\005" +
    "\020\025\021\015\022\010\023\022\024\014\025\020\026" +
    "\026\001\001\000\030\014\034\015\003\016\021\017\005" +
    "\020\025\021\015\022\010\023\022\024\014\025\020\026" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\002\061\003\044\004\060\005\056\006\055\007\053" +
    "\010\052\012\047\036\050\037\057\001\001\000\006\004" +
    "\060\012\130\001\001\000\014\002\061\003\044\004\060" +
    "\012\047\037\126\001\001\000\002\001\001\000\006\004" +
    "\060\012\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\002\061\003\044\004\060\007\102" +
    "\012\047\037\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\073\004\060\012\047\001\001\000\010\003" +
    "\064\004\060\012\047\001\001\000\002\001\001\000\006" +
    "\004\060\012\072\001\001\000\006\004\060\012\071\001" +
    "\001\000\006\004\060\012\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\002\061\003\044" +
    "\004\060\006\077\007\053\012\047\037\057\001\001\000" +
    "\002\001\001\000\016\002\061\003\044\004\060\007\101" +
    "\012\047\037\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\061\003\044\004\060\005\106\006\055" +
    "\007\053\012\047\037\057\001\001\000\022\002\061\003" +
    "\044\004\060\005\105\006\055\007\053\012\047\037\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\061\003\044\004\060\012\047\037\120\001\001\000\024" +
    "\002\061\003\044\004\060\005\056\006\055\007\053\010" +
    "\117\012\047\037\057\001\001\000\024\002\061\003\044" +
    "\004\060\005\056\006\055\007\053\010\116\012\047\037" +
    "\057\001\001\000\024\002\061\003\044\004\060\005\056" +
    "\006\055\007\053\010\115\012\047\037\057\001\001\000" +
    "\024\002\061\003\044\004\060\005\056\006\055\007\053" +
    "\010\114\012\047\037\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\013\123\014\017\015" +
    "\003\016\021\017\005\020\025\021\015\022\010\023\022" +
    "\024\014\025\020\026\026\001\001\000\030\014\034\015" +
    "\003\016\021\017\005\020\025\021\015\022\010\023\022" +
    "\024\014\025\020\026\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\061\003\044\004" +
    "\060\012\047\037\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\061\003\044\004\060\012\047\037" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\013\141\014\017\015\003\016\021\017\005\020\025\021" +
    "\015\022\010\023\022\024\014\025\020\026\026\001\001" +
    "\000\030\014\034\015\003\016\021\017\005\020\025\021" +
    "\015\022\010\023\022\024\014\025\020\026\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\002\061\003" +
    "\044\004\060\005\056\006\055\007\053\010\052\012\047" +
    "\036\145\037\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\152\035\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\157\035\153" +
    "\001\001\000\002\001\001\000\026\002\061\003\044\004" +
    "\060\005\056\006\055\007\053\010\052\012\047\036\161" +
    "\037\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\013\164\014\017\015\003\016\021\017\005\020\025" +
    "\021\015\022\010\023\022\024\014\025\020\026\026\001" +
    "\001\000\030\014\034\015\003\016\021\017\005\020\025" +
    "\021\015\022\010\023\022\024\014\025\020\026\026\001" +
    "\001\000\004\011\167\001\001\000\004\016\171\001\001" +
    "\000\002\001\001\000\032\013\172\014\017\015\003\016" +
    "\021\017\005\020\025\021\015\022\010\023\022\024\014" +
    "\025\020\026\026\001\001\000\002\001\001\000\030\014" +
    "\034\015\003\016\021\017\005\020\025\021\015\022\010" +
    "\023\022\024\014\025\020\026\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\177" +
    "\033\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\204\033\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\013" +
    "\207\014\017\015\003\016\021\017\005\020\025\021\015" +
    "\022\010\023\022\024\014\025\020\026\026\001\001\000" +
    "\030\014\034\015\003\016\021\017\005\020\025\021\015" +
    "\022\010\023\022\024\014\025\020\026\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\061\003\044\004" +
    "\060\012\047\037\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\221\030\223\001\001\000\006\030" +
    "\233\031\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\013\226\014\017\015\003\016" +
    "\021\017\005\020\025\021\015\022\010\023\022\024\014" +
    "\025\020\026\026\001\001\000\030\014\034\015\003\016" +
    "\021\017\005\020\025\021\015\022\010\023\022\024\014" +
    "\025\020\026\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\013\235\014\017\015\003\016\021\017\005\020" +
    "\025\021\015\022\010\023\022\024\014\025\020\026\026" +
    "\001\001\000\030\014\034\015\003\016\021\017\005\020" +
    "\025\021\015\022\010\023\022\024\014\025\020\026\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\061\003\044\004\060" +
    "\005\056\006\055\007\053\010\052\012\047\036\243\037" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\013\246\014\017\015\003\016\021\017\005\020\025\021" +
    "\015\022\010\023\022\024\014\025\020\026\026\001\001" +
    "\000\030\014\034\015\003\016\021\017\005\020\025\021" +
    "\015\022\010\023\022\024\014\025\020\026\026\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= ST 
            { parser.Tree.reduce(1,"S",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= S ST 
            { parser.Tree.reduce(2,"S",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ST ::= ASGN 
            { parser.Tree.reduce(1,"ST",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ST ::= IF_ST 
            { parser.Tree.reduce(1,"ST",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ST ::= SW_ST 
            { parser.Tree.reduce(1,"ST",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ST ::= FOR_ST 
            { parser.Tree.reduce(1,"ST",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ST ::= WH_ST 
            { parser.Tree.reduce(1,"ST",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ST ::= DO_WH 
            { parser.Tree.reduce(1,"ST",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ST ::= FUNC 
            { parser.Tree.reduce(1,"ST",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ST ::= FUNC_CALL 
            { parser.Tree.reduce(1,"ST",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ST ::= DECL 
            { parser.Tree.reduce(1,"ST",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ST ::= MAIN_FC 
            { parser.Tree.reduce(1,"ST",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ASGN ::= DT ID EQ EXP SM 
            { parser.Tree.reduce(5,"ASGN",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASGN",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ASGN ::= ID EQ EXP SM 
            { parser.Tree.reduce(4,"ASGN",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASGN",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECL ::= DT ID SM 
            { parser.Tree.reduce(3,"DECL",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IF_ST ::= IF LP COND RP LCB S RCB M 
            { parser.Tree.reduce(8,"IF_ST",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ST",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IF_ST ::= IF LP COND RP LCB S RCB 
            { parser.Tree.reduce(7,"IF_ST",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ST",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // M ::= ELSE LCB S RCB 
            { parser.Tree.reduce(4,"M",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // M ::= ELSE IF_ST 
            { parser.Tree.reduce(2,"M",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SW_ST ::= SWITCH LP EXP RP LCB CASES DEFAULT RCB 
            { parser.Tree.reduce(8,"SW_ST",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SW_ST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CASES ::= CASE_IT 
            { parser.Tree.reduce(1,"CASES",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CASES ::= CASES CASE_IT 
            { parser.Tree.reduce(2,"CASES",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CASE_IT ::= CASE DIGIT COLON S BREAK SM 
            { parser.Tree.reduce(6,"CASE_IT",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_IT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFAULT ::= DEF COLON S BREAK SM 
            { parser.Tree.reduce(5,"DEFAULT",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEFAULT ::= 
            { parser.Tree.reduce(0,"DEFAULT",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FOR_ST ::= FOR LP ASGN COND SM EXP RP LCB S RCB 
            { parser.Tree.reduce(10,"FOR_ST",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR_ST",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // WH_ST ::= WHILE LP COND RP LCB S RCB 
            { parser.Tree.reduce(7,"WH_ST",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WH_ST",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DO_WH ::= DO LCB S RCB WHILE LP COND RP SM 
            { parser.Tree.reduce(9,"DO_WH",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WH",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MAIN_FC ::= VOID MAIN LP RP LCB S RCB 
            { parser.Tree.reduce(7,"MAIN_FC",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN_FC",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNC ::= DT ID LP PARA RP LCB S RCB 
            { parser.Tree.reduce(8,"FUNC",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNC ::= DT ID LP PARA RP LCB S RETURN ID SM RCB 
            { parser.Tree.reduce(11,"FUNC",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARA ::= DT ID 
            { parser.Tree.reduce(2,"PARA",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARA ::= COMPARA 
            { parser.Tree.reduce(1,"PARA",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARA ::= 
            { parser.Tree.reduce(0,"PARA",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COMPARA ::= DT ID COMMA PARA 
            { parser.Tree.reduce(4,"COMPARA",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNC_CALL ::= ID LP ARGS RP SM 
            { parser.Tree.reduce(5,"FUNC_CALL",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ARGS ::= ID 
            { parser.Tree.reduce(1,"ARGS",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ARGS ::= COM 
            { parser.Tree.reduce(1,"ARGS",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARGS ::= 
            { parser.Tree.reduce(0,"ARGS",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COM ::= ID COMMA ARGS 
            { parser.Tree.reduce(3,"COM",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COM",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COND ::= COND GE K 
            { parser.Tree.reduce(3,"COND",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COND ::= COND LE K 
            { parser.Tree.reduce(3,"COND",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COND ::= COND GR K 
            { parser.Tree.reduce(3,"COND",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COND ::= COND LS K 
            { parser.Tree.reduce(3,"COND",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COND ::= K 
            { parser.Tree.reduce(1,"COND",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // K ::= K NE G 
            { parser.Tree.reduce(3,"K",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // K ::= K EE G 
            { parser.Tree.reduce(3,"K",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // K ::= G 
            { parser.Tree.reduce(1,"K",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // G ::= G OO H 
            { parser.Tree.reduce(3,"G",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // G ::= H 
            { parser.Tree.reduce(1,"G",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // H ::= H AO J 
            { parser.Tree.reduce(3,"H",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // H ::= J 
            { parser.Tree.reduce(1,"H",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // J ::= EXP 
            { parser.Tree.reduce(1,"J",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // J ::= NE J 
            { parser.Tree.reduce(2,"J",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= E 
            { parser.Tree.reduce(1,"EXP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= EXP INCR 
            { parser.Tree.reduce(2,"EXP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= EXP DECR 
            { parser.Tree.reduce(2,"EXP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E PLUS T 
            { parser.Tree.reduce(3,"E",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E MINUS T 
            { parser.Tree.reduce(3,"E",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= T 
            { parser.Tree.reduce(1,"E",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // T ::= T MUL N 
            { parser.Tree.reduce(3,"T",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // T ::= T DIV N 
            { parser.Tree.reduce(3,"T",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // T ::= T MOD N 
            { parser.Tree.reduce(3,"T",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // T ::= N 
            { parser.Tree.reduce(1,"T",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // N ::= INCR N 
            { parser.Tree.reduce(2,"N",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // N ::= DECR N 
            { parser.Tree.reduce(2,"N",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // N ::= F 
            { parser.Tree.reduce(1,"N",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // F ::= LP EXP RP 
            { parser.Tree.reduce(3,"F",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // F ::= ID 
            { parser.Tree.reduce(1,"F",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // F ::= DIGIT 
            { parser.Tree.reduce(1,"F",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
