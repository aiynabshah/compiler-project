// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Scanner.jflex

import java_cup.runtime.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Examplee implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\6\1\22\0\1\1\1\2\3\0\1\3\1\4"+
    "\1\0\1\5\1\6\1\7\1\10\1\11\1\12\1\0"+
    "\1\13\12\14\1\15\1\16\1\17\1\20\1\21\2\0"+
    "\32\22\4\0\1\22\1\0\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\22\1\31\1\32\1\22\1\33\1\34"+
    "\1\35\1\36\1\37\2\22\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\3\22\1\46\1\47\1\50\7\0\1\1"+
    "\32\0\1\1\u01df\0\1\1\177\0\13\1\35\0\2\1"+
    "\5\0\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\0\1\3\1\0\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\1\1\13\1\14\1\15"+
    "\1\16\1\17\14\20\1\21\1\0\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\5\20\1\32\3\20"+
    "\1\33\6\20\1\34\10\20\1\35\1\36\7\20\1\37"+
    "\2\20\1\40\1\41\2\20\1\42\2\20\1\43\4\20"+
    "\1\44\2\20\1\45\1\46\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\51\0\173\0\51\0\51\0\51"+
    "\0\244\0\51\0\315\0\51\0\366\0\51\0\51\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267"+
    "\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\51\0\u0386"+
    "\0\51\0\51\0\51\0\51\0\51\0\51\0\51\0\51"+
    "\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5\0\u04ce"+
    "\0\u04f7\0\u019a\0\u0520\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed"+
    "\0\51\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c"+
    "\0\u0735\0\u019a\0\u019a\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802"+
    "\0\u082b\0\u0854\0\u019a\0\u087d\0\u08a6\0\u019a\0\u019a\0\u08cf"+
    "\0\u08f8\0\u019a\0\u0921\0\u094a\0\u019a\0\u0973\0\u099c\0\u09c5"+
    "\0\u09ee\0\u019a\0\u0a17\0\u0a40\0\u019a\0\u019a\0\u019a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\2\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\23\1\31\2\23\1\32\2\23\1\33\1\34\2\23"+
    "\1\35\1\36\1\37\1\40\1\41\71\0\1\42\34\0"+
    "\1\43\54\0\1\44\52\0\1\45\52\0\1\15\54\0"+
    "\1\46\50\0\1\47\50\0\1\50\44\0\1\23\5\0"+
    "\24\23\17\0\1\23\5\0\15\23\1\51\1\52\5\23"+
    "\17\0\1\23\5\0\1\23\1\53\5\23\1\54\14\23"+
    "\17\0\1\23\5\0\5\23\1\55\7\23\1\56\6\23"+
    "\17\0\1\23\5\0\12\23\1\57\11\23\17\0\1\23"+
    "\5\0\12\23\1\60\2\23\1\61\6\23\17\0\1\23"+
    "\5\0\6\23\1\62\5\23\1\63\7\23\17\0\1\23"+
    "\5\0\1\23\1\64\22\23\17\0\1\23\5\0\5\23"+
    "\1\65\16\23\17\0\1\23\5\0\23\23\1\66\17\0"+
    "\1\23\5\0\15\23\1\67\6\23\17\0\1\23\5\0"+
    "\7\23\1\70\14\23\52\0\1\71\15\0\1\23\5\0"+
    "\15\23\1\72\6\23\17\0\1\23\5\0\5\23\1\73"+
    "\16\23\17\0\1\23\5\0\17\23\1\74\4\23\17\0"+
    "\1\23\5\0\1\23\1\75\22\23\17\0\1\23\5\0"+
    "\6\23\1\76\15\23\17\0\1\23\5\0\21\23\1\77"+
    "\2\23\17\0\1\23\5\0\17\23\1\100\4\23\17\0"+
    "\1\23\5\0\15\23\1\101\6\23\17\0\1\23\5\0"+
    "\16\23\1\102\5\23\17\0\1\23\5\0\20\23\1\103"+
    "\3\23\17\0\1\23\5\0\10\23\1\104\13\23\17\0"+
    "\1\23\5\0\20\23\1\105\3\23\17\0\1\23\5\0"+
    "\10\23\1\106\13\23\17\0\1\23\5\0\10\23\1\107"+
    "\13\23\17\0\1\23\5\0\10\23\1\110\13\23\17\0"+
    "\1\23\5\0\12\23\1\111\11\23\17\0\1\23\5\0"+
    "\1\23\1\112\22\23\17\0\1\23\5\0\5\23\1\113"+
    "\16\23\17\0\1\23\5\0\16\23\1\103\5\23\17\0"+
    "\1\23\5\0\1\23\1\114\22\23\17\0\1\23\5\0"+
    "\2\23\1\115\21\23\17\0\1\23\5\0\5\23\1\116"+
    "\16\23\17\0\1\23\5\0\1\23\1\63\22\23\17\0"+
    "\1\23\5\0\14\23\1\117\7\23\17\0\1\23\5\0"+
    "\21\23\1\120\2\23\17\0\1\23\5\0\20\23\1\121"+
    "\3\23\17\0\1\23\5\0\4\23\1\122\17\23\17\0"+
    "\1\23\5\0\12\23\1\123\11\23\17\0\1\23\5\0"+
    "\5\23\1\124\16\23\17\0\1\23\5\0\11\23\1\125"+
    "\12\23\17\0\1\23\5\0\21\23\1\126\2\23\17\0"+
    "\1\23\5\0\12\23\1\127\11\23\17\0\1\23\5\0"+
    "\16\23\1\130\5\23\17\0\1\23\5\0\3\23\1\131"+
    "\20\23\17\0\1\23\5\0\5\23\1\132\16\23\17\0"+
    "\1\23\5\0\1\23\1\133\22\23\17\0\1\23\5\0"+
    "\12\23\1\134\11\23\17\0\1\23\5\0\5\23\1\103"+
    "\16\23\17\0\1\23\5\0\14\23\1\135\7\23\17\0"+
    "\1\23\5\0\7\23\1\136\14\23\17\0\1\23\5\0"+
    "\14\23\1\103\7\23\17\0\1\23\5\0\20\23\1\137"+
    "\3\23\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2665];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\0\1\11\1\0\3\11\1\1\1\11"+
    "\1\1\1\11\1\1\2\11\17\1\1\11\1\0\10\11"+
    "\20\1\1\11\46\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Examplee(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("<" + yytext() +", DIGIT>");return new Symbol(sym.DIGIT);
            }
            // fall through
          case 40: break;
          case 2:
            { 
            }
            // fall through
          case 41: break;
          case 3:
            { System.out.println("<" + yytext() +", MOD>");return new Symbol(sym.MOD);
            }
            // fall through
          case 42: break;
          case 4:
            { System.out.println("<" + yytext() +", LP>");return new Symbol(sym.LP);
            }
            // fall through
          case 43: break;
          case 5:
            { System.out.println("<" + yytext() +", RP>");return new Symbol(sym.RP);
            }
            // fall through
          case 44: break;
          case 6:
            { System.out.println("<" + yytext() +",MUL >");return new Symbol(sym.MUL);
            }
            // fall through
          case 45: break;
          case 7:
            { System.out.println("<" + yytext() +", PLUS>");return new Symbol(sym.PLUS);
            }
            // fall through
          case 46: break;
          case 8:
            { System.out.println("<" + yytext() +", COMMA>");return new Symbol(sym.COMMA);
            }
            // fall through
          case 47: break;
          case 9:
            { System.out.println("<" + yytext() +", MINUS>");return new Symbol(sym.MINUS);
            }
            // fall through
          case 48: break;
          case 10:
            { System.out.println("<" + yytext() +", DIV >");return new Symbol(sym.DIV);
            }
            // fall through
          case 49: break;
          case 11:
            { System.out.println("<" + yytext() +", COLON>");return new Symbol(sym.COLON);
            }
            // fall through
          case 50: break;
          case 12:
            { System.out.println("<" + yytext() +", SM>");return new Symbol(sym.SM);
            }
            // fall through
          case 51: break;
          case 13:
            { System.out.println("<" + yytext() +", LS>");return new Symbol(sym.LS);
            }
            // fall through
          case 52: break;
          case 14:
            { System.out.println("<" + yytext() +", EQ>");return new Symbol(sym.EQ);
            }
            // fall through
          case 53: break;
          case 15:
            { System.out.println("<" + yytext() +", GR>");return new Symbol(sym.GR);
            }
            // fall through
          case 54: break;
          case 16:
            { System.out.println("<" + yytext() +", ID>");return new Symbol(sym.ID);
            }
            // fall through
          case 55: break;
          case 17:
            { System.out.println("<" + yytext() +", LCB>");return new Symbol(sym.LCB);
            }
            // fall through
          case 56: break;
          case 18:
            { System.out.println("<" + yytext() +", RCB>");return new Symbol(sym.RCB);
            }
            // fall through
          case 57: break;
          case 19:
            { System.out.println("<" + yytext() +", NE>");return new Symbol(sym.NE);
            }
            // fall through
          case 58: break;
          case 20:
            { System.out.println("<" + yytext() +", AO>");return new Symbol(sym.AO);
            }
            // fall through
          case 59: break;
          case 21:
            { System.out.println("<" + yytext() +", INCR>");return new Symbol(sym.INCR);
            }
            // fall through
          case 60: break;
          case 22:
            { System.out.println("<" + yytext() +", DECR>");return new Symbol(sym.DECR);
            }
            // fall through
          case 61: break;
          case 23:
            { System.out.println("<" + yytext() +", LE>");return new Symbol(sym.LE);
            }
            // fall through
          case 62: break;
          case 24:
            { System.out.println("<" + yytext() +", EE>");return new Symbol(sym.EE);
            }
            // fall through
          case 63: break;
          case 25:
            { System.out.println("<" + yytext() +", GE>");return new Symbol(sym.GE);
            }
            // fall through
          case 64: break;
          case 26:
            { System.out.println("<" + yytext() +", DO>");return new Symbol(sym.DO);
            }
            // fall through
          case 65: break;
          case 27:
            { System.out.println("<" + yytext() +", IF>");return new Symbol(sym.IF);
            }
            // fall through
          case 66: break;
          case 28:
            { System.out.println("<" + yytext() +", OO>");return new Symbol(sym.OO);
            }
            // fall through
          case 67: break;
          case 29:
            { System.out.println("<" + yytext() +", FOR>");return new Symbol(sym.FOR);
            }
            // fall through
          case 68: break;
          case 30:
            { System.out.println("<" + yytext() +", DT>");return new Symbol(sym.DT);
            }
            // fall through
          case 69: break;
          case 31:
            { System.out.println("<" + yytext() +", CASE>");return new Symbol(sym.CASE);
            }
            // fall through
          case 70: break;
          case 32:
            { System.out.println("<" + yytext() +", ELSE>");return new Symbol(sym.ELSE);
            }
            // fall through
          case 71: break;
          case 33:
            { System.out.println("<" + yytext() +", MAIN>");return new Symbol(sym.MAIN);
            }
            // fall through
          case 72: break;
          case 34:
            { System.out.println("<" + yytext() +", VOID>");return new Symbol(sym.VOID);
            }
            // fall through
          case 73: break;
          case 35:
            { System.out.println("<" + yytext() +", BREAK>");return new Symbol(sym.BREAK);
            }
            // fall through
          case 74: break;
          case 36:
            { System.out.println("<" + yytext() +", WHILE>");return new Symbol(sym.WHILE);
            }
            // fall through
          case 75: break;
          case 37:
            { System.out.println("<" + yytext() +", RETURN>");return new Symbol(sym.RETURN);
            }
            // fall through
          case 76: break;
          case 38:
            { System.out.println("<" + yytext() +", SWITCH>");return new Symbol(sym.SWITCH);
            }
            // fall through
          case 77: break;
          case 39:
            { System.out.println("<" + yytext() +", DEF>");return new Symbol(sym.DEF);
            }
            // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
